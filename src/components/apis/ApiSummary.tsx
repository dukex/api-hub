'use client';

import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Sparkles, AlertCircle } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';

type ApiSummaryProps = {
  apiId: string;
  initialSummary?: string | null; // Optional initial summary if pre-fetched
  fetchSummaryAction: (apiId: string) => Promise<string | null>;
};

export default function ApiSummary({ apiId, initialSummary, fetchSummaryAction }: ApiSummaryProps) {
  const [summary, setSummary] = useState<string | null | undefined>(initialSummary); // undefined means not yet fetched/loading
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFetchSummary = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const result = await fetchSummaryAction(apiId);
      setSummary(result);
    } catch (err) {
      console.error("Failed to fetch summary:", err);
      setError("An error occurred while generating the summary.");
      setSummary(null);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (initialSummary === undefined) { // Only fetch if no initial summary provided
        // Automatically fetch summary on mount if not provided
        // handleFetchSummary(); 
        // Decided against auto-fetching to allow user to trigger. 
        // If auto-fetch is desired, uncomment the line above and set initialSummary to undefined.
        // For now, require a button click if no initialSummary.
        setSummary(null); // Set to null to indicate it needs fetching
    }
  }, [apiId, initialSummary]);


  return (
    <Card className="shadow-md">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-xl">
          <Sparkles className="h-6 w-6 text-accent" />
          AI-Powered Summary
        </CardTitle>
        <CardDescription>
          A concise overview of this API, generated by AI.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {summary === undefined || (isLoading && summary === undefined) ? ( // initialSummary was undefined, and still loading
          <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
            <Button onClick={handleFetchSummary} disabled={isLoading} className="mt-2 w-full">
              {isLoading ? 'Generating...' : 'Generate Summary'}
            </Button>
          </div>
        ) : isLoading ? ( // Was already showing something, but now loading new
          <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
             <p className="text-sm text-muted-foreground text-center py-2">Generating updated summary...</p>
          </div>
        ) : error ? (
          <div className="text-destructive flex items-center gap-2 p-3 bg-destructive/10 rounded-md">
            <AlertCircle className="h-5 w-5" />
            <p>{error}</p>
          </div>
        ) : summary ? (
          <Textarea
            value={summary}
            readOnly
            className="min-h-[120px] bg-muted/50 border-0 focus-visible:ring-1 focus-visible:ring-ring"
            aria-label="API Summary"
          />
        ) : (
           <Button onClick={handleFetchSummary} disabled={isLoading} className="w-full">
             Generate Summary
           </Button>
        )}
        {!isLoading && summary && ( // Show regenerate button if summary exists and not loading
            <Button onClick={handleFetchSummary} variant="outline" className="mt-4 w-full">
                Regenerate Summary
            </Button>
        )}
      </CardContent>
    </Card>
  );
}
